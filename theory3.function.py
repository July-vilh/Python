1. Создать функцию: 
  
def f1(a1, a2, a3):
    v1 = a1 * 2
    return v1
result = f1(2, 3, 4)
print(result)

__________________________________
По кускам: 
  
1.1) def f1(а1, а2, а3):
  
* где:
    - def = функция
    - f1 = название функции, эта функция на вход ожидает 3 параметра = а1, а2, а3
    - а1, а2, а3 = параметры внутри функции
 
* Внутри функции мы создали переменную v1. Эта переменная берет первый параметр (а1) и * на 2:
________

1.2) v1 = а1 * 2

* Потом словом return мы говорим функции что вернуть когда ее вызвали (вернет она значение которое присвоено этой переменной v1):
________

1.3) return v1

* Вызов функции:
________

1.4) result = f1(2, 3, 4)
________

1.5) print(result)

* Потом запускаем
  
ДЛЯ ЧЕГО НУЖНЫ ФУНКЦИИ: 
  - В 1 функции могут быть сотни строк кода и кусок кода коорый внутри функции надо использовать раз 5 в нашей программе 
  и что бы не дублировать сотни строк кода которые нам понадобятся мы засовываем этот код в 1 функцию f1(a1, a2, a3) а потом просто вызываем одну строчку с функцией с входными параметрами

ПЕРЕМЕННЫЕ МОГУТ БЫТЬ:
1. Глобальные (global) которые являются как ьы вирткальными (то есть висят где-то в памяти и их можно в любой момент "дернуть")
задача таких переменных поменять то что уже существует при этом ничего не возвращая 
2. Локальные (local)

def f1(a1, a2, a3):
    v1 = a1 * 2
    v2 = a2 * 10
    v3 = a3 * 7

    return v1, v2, v3

r1, r2, r3 = f1(2,3,4)
print(r1, r2, r3)

# АНАЛОГ:

def f1(a1, a2, a3):
    v1 = a1 * 2
    v2 = a2 * 10
    v3 = a3 * 7

    result = [v1,v2,v3]
    return result
f_result = f1(2,3,4)
print(f_result)

# например вернуть второй элемент из списка:

def f1(a1, a2, a3):
    v1 = a1 * 2
    v2 = a2 * 10
    v3 = a3 * 7

    result = [v1, v2, v3]
    return result


f_result = f1(2, 3, 4)
print(f_result[2])

  
  
  
  
  
  
  
это называется распаковка
когда не знаешь сколько ты будешь передавать аргументов, то используешь *args (может быть любое слово, но принято писать args)

                                                          
все пременные "распаковываются" в кортеж args и ты можешь к ним по индексу обращаться
args[0] например
                                                          
                                                          args = порядковые переменные
                                                          kwargs = именованные переменные (а = 500 например)
                                                          !!!!!!!!!сначала объявляются порядковые переменные затем именованные!!!!!!!!!!!!
                                                          
                                                          global это глобальные переменные как например environment in postman
                                                          
